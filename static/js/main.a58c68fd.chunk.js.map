{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","message","isUser","username","className","Card","style","backgroundColor","CardContent","Typography","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","inputs","setInputs","messages","setMessages","setUserName","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","name","prompt","action","FormControl","InputLabel","Input","type","value","onChange","event","target","Button","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","disabled","variant","color","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8VAIe,SAASA,EAAT,GAAsC,IAApBC,EAAmB,EAAnBA,QACvBC,EAD0C,EAAXC,WACTF,EAAQE,SACpC,OACI,yBAAKC,UAAS,kBAAaF,GAAU,iBACjC,kBAACG,EAAA,EAAD,CAAMC,MAAOJ,EAAS,CAACK,gBAAgB,WAAa,CAACA,gBAAgB,YACjE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACKR,EAAQE,SADb,MAC0BF,EAAQA,Y,2BCIvCS,EAbKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,YC0DRC,MAhEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNpB,EAHM,KAGIyB,EAHJ,KAkCb,OA7BAC,qBAAU,WACRnB,EAAGoB,WAAW,YAAYC,YAAW,SAAAC,GACnCL,EAAYK,EAASC,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIC,gBAE1C,IAEHP,qBAAU,WACR,IAAMQ,EAAOC,OAAO,8BACpBV,EAAYS,KACX,IAqBD,yBAAKjC,UAAU,OACb,yCACA,uCAAaD,GACb,0BAAMoC,OAAO,IACX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,6BACA,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,MAAOpB,EACPqB,SAAU,SAAAC,GAAK,OAAIrB,EAAUqB,EAAMC,OAAOH,UAE5C,kBAACI,EAAA,EAAD,CACEL,KAAK,SACLM,QAhCU,SAAAH,GAClBA,EAAMI,iBAENxC,EAAGoB,WAAW,YAAYqB,IAAI,CAC5BlD,QAASuB,EACTrB,SAAUA,EACViD,UAAWzC,IAASU,UAAUgC,WAAWC,oBAE3C3B,EAAY,GAAD,mBACND,GADM,CAET,CACEvB,SAAUA,EACVF,QAASuB,MAGbC,EAAU,KAkBF8B,UAAW/B,EACXgC,QAAQ,YACRC,MAAM,WALR,kBAWH/B,EAASQ,KAAI,SAACjC,EAASyD,GAAV,OACZ,kBAAC,EAAD,CAASA,IAAKA,EAAKvD,SAAUA,EAAUF,QAASA,SCrDpC0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM3E,c","file":"static/js/main.a58c68fd.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card,CardContent,Typography } from \"@material-ui/core\";\r\nimport './Message.css';\r\n\r\nexport default function Message({message,username}) {\r\n    const isUser = username === message.username;\r\n    return (\r\n        <div className={`message ${isUser && 'message_user'}`}>\r\n            <Card style={isUser ? {backgroundColor:\"#0b81ff\"} : {backgroundColor:\"#e9e9eb\"}}>\r\n                <CardContent>\r\n                    <Typography>\r\n                        {message.username} : {message.message}\r\n                    </Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyCupT3MGIgO6qqOG4VNPwEwB8F8LsGP_RE\",\r\n  authDomain: \"facebook-messenger-clone-33fe9.firebaseapp.com\",\r\n  databaseURL: \"https://facebook-messenger-clone-33fe9.firebaseio.com\",\r\n  projectId: \"facebook-messenger-clone-33fe9\",\r\n  storageBucket: \"facebook-messenger-clone-33fe9.appspot.com\",\r\n  messagingSenderId: \"697189168600\",\r\n  appId: \"1:697189168600:web:b0ccf1eab4d39933e1aead\",\r\n  measurementId: \"G-RTGJ7BE2EF\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Button, FormControl, Input, InputLabel } from \"@material-ui/core\";\nimport Message from \"./Message\";\nimport \"./App.css\";\nimport db from \"./firebase\";\nimport firebase from \"firebase\";\n\nfunction App() {\n  const [inputs, setInputs] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [username, setUserName] = useState(\"\");\n\n  useEffect(() => {\n    db.collection(\"messages\").onSnapshot(snapshot => {\n      setMessages(snapshot.docs.map(doc => doc.data()));\n    });\n  }, []);\n\n  useEffect(() => {\n    const name = prompt(\"Please Enter the your name\");\n    setUserName(name);\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    db.collection(\"messages\").add({\n      message: inputs,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    });\n    setMessages([\n      ...messages,\n      {\n        username: username,\n        message: inputs\n      }\n    ]);\n    setInputs(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Messenger</h1>\n      <h2>Welcome {username}</h2>\n      <form action=\"\">\n        <FormControl>\n          <InputLabel>Enter the message...</InputLabel>\n          <Input\n            type=\"text\"\n            value={inputs}\n            onChange={event => setInputs(event.target.value)}\n          />\n          <Button\n            type=\"submit\"\n            onClick={sendMessage}\n            disabled={!inputs}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Send Message\n          </Button>\n        </FormControl>\n      </form>\n      {messages.map((message, key) => (\n        <Message key={key} username={username} message={message} />\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}